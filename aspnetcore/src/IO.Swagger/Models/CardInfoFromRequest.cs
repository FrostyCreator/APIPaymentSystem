/*
 * Payment System API
 *
 * This is a simple API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: salimow.r2015@yandex.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CardInfoFromRequest : IEquatable<CardInfoFromRequest>
    { 
        /// <summary>
        /// Gets or Sets CardNumber
        /// </summary>
        [Required]
        [DataMember(Name="cardNumber")]
        public string CardNumber { get; set; }

        /// <summary>
        /// Gets or Sets VerificationNumber
        /// </summary>
        [Required]
        [DataMember(Name="verificationNumber")]
        public string VerificationNumber { get; set; }

        /// <summary>
        /// Gets or Sets CardDate
        /// </summary>
        [Required]
        [DataMember(Name="cardDate")]
        public string CardDate { get; set; }

        /// <summary>
        /// Gets or Sets SessionId
        /// </summary>
        [Required]
        [DataMember(Name="sessionId")]
        public string SessionId { get; set; }

        /// <summary>
        /// Gets or Sets StoreUrl
        /// </summary>
        [DataMember(Name="storeUrl")]
        public string StoreUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CardInfoFromRequest {\n");
            sb.Append("  CardNumber: ").Append(CardNumber).Append("\n");
            sb.Append("  VerificationNumber: ").Append(VerificationNumber).Append("\n");
            sb.Append("  CardDate: ").Append(CardDate).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  StoreUrl: ").Append(StoreUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CardInfoFromRequest)obj);
        }

        /// <summary>
        /// Returns true if CardInfoFromRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of CardInfoFromRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardInfoFromRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CardNumber == other.CardNumber ||
                    CardNumber != null &&
                    CardNumber.Equals(other.CardNumber)
                ) && 
                (
                    VerificationNumber == other.VerificationNumber ||
                    VerificationNumber != null &&
                    VerificationNumber.Equals(other.VerificationNumber)
                ) && 
                (
                    CardDate == other.CardDate ||
                    CardDate != null &&
                    CardDate.Equals(other.CardDate)
                ) && 
                (
                    SessionId == other.SessionId ||
                    SessionId != null &&
                    SessionId.Equals(other.SessionId)
                ) && 
                (
                    StoreUrl == other.StoreUrl ||
                    StoreUrl != null &&
                    StoreUrl.Equals(other.StoreUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CardNumber != null)
                    hashCode = hashCode * 59 + CardNumber.GetHashCode();
                    if (VerificationNumber != null)
                    hashCode = hashCode * 59 + VerificationNumber.GetHashCode();
                    if (CardDate != null)
                    hashCode = hashCode * 59 + CardDate.GetHashCode();
                    if (SessionId != null)
                    hashCode = hashCode * 59 + SessionId.GetHashCode();
                    if (StoreUrl != null)
                    hashCode = hashCode * 59 + StoreUrl.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CardInfoFromRequest left, CardInfoFromRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CardInfoFromRequest left, CardInfoFromRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
